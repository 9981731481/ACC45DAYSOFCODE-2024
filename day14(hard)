

#include <iostream>
using namespace std;
struct listN{
    int val;
    listN *next;
    listN(int x):val(x),next(NULL){}
};

class Solution{
public:
    bool cycle(listN *head) {
        if (!head || !head->next) {
            return false;
        }
        listN *slow = head;
        listN *fast = head;
        while (fast && fast->next) {
            slow = slow->next;       
            fast = fast->next->next;  

            if (slow == fast) {
                return true; 
            }
        }
        return false;
    }
};

int main() {
    //Creating a clinked list [3, 2, 0, -4] with position at 1
    listN *head = new listN(3);
    head->next = new listN(2);
    head->next->next = new listN(0);
    head->next->next->next = new listN(-4);
    head->next->next->next->next = head->next; 
    Solution solution;
    if (solution.cycle(head)) {
        cout << "Cycle detected in the linked list.\n";
    } else {
        cout << "No cycle detected in the linked list.\n";
    }    

    delete head;
    return 0;
}



